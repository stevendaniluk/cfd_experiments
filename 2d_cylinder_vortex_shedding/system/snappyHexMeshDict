/*--------------------------------*- C++ -*----------------------------------*\
  =========                 |
  \\      /  F ield         | OpenFOAM: The Open Source CFD Toolbox
   \\    /   O peration     | Website:  https://openfoam.org
    \\  /    A nd           | Version:  11
     \\/     M anipulation  |
\*---------------------------------------------------------------------------*/
FoamFile
{
    version     2.0;
    format      ascii;
    class       dictionary;
    object      snappyHexMeshDict;
}
// * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * * //

castellatedMesh true;
snap            true;
addLayers       true;

// Levels of refinements for the trailing zone around the cylinder
n_refine 4;
// Boundary layer levels
n_boundary 10;

geometry
{
    body.stl
    {
        type triSurfaceMesh;
        name body;
    }

    refinement_box
    {
        type searchableBox;
        min (-2.0 -2.0 0.0);
        max (8.0 2.0 1.0);
    }
};

// Settings for the castellatedMesh generation
castellatedMeshControls
{

    // Refinement parameters
    maxLocalCells 2000000;
    maxGlobalCells 20000000;
    minRefinementCells 10;
    maxLoadUnbalance 0.10;

    nCellsBetweenLevels 10;

    // Explicit feature edge refinement
    features
    (
        {
            file "body.eMesh";
            level  0;
        }
    );

    // Surface based refinement
    refinementSurfaces
    {
        body
        {
            level (1 1);
        }
    }

    resolveFeatureAngle 30;
    planarAngle 30;
    // gapLevelIncrement 2;

    // Region-wise refinement
    refinementRegions
    {
        refinement_box
        {
            mode inside;
            levels (($n_refine $n_refine));
        }
    }

    locationInMesh (-2.0 0.0 0.5);
    allowFreeStandingZoneFaces true;
}

// Settings for the snapping.
snapControls
{
    // Number of patch smoothing iterations before finding correspondence
    // to surface
    nSmoothPatch 3;

    // Maximum relative distance for points to be attracted by surface.
    // True distance is this factor times local maximum edge length.
    // Note: changed(corrected) w.r.t 17x! (17x used 2* tolerance)
    tolerance 2.0;

    // Number of mesh displacement relaxation iterations.
    nSolveIter 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Feature snapping

    // Number of feature edge snapping iterations.
    // Leave out altogether to disable.
    nFeatureSnapIter 10;

    // Detect (geometric only) features by sampling the surface
    // (default=false).
    implicitFeatureSnap false;

    // Use castellatedMeshControls::features (default = true)
    explicitFeatureSnap true;

    // Detect features between multiple surfaces
    // (only for explicitFeatureSnap, default = false)
    multiRegionFeatureSnap false;

    // wip: disable snapping to opposite near surfaces (revert to 22x behaviour)
    // detectNearSurfacesSnap false;
}

// Settings for the layer addition.
addLayersControls
{
    // Are the thickness parameters below relative to the undistorted
    // size of the refined cell outside layer (true) or absolute sizes (false).
    relativeSizes true;

    // Layer thickness specification. This can be specified in one of following
    // ways:
    // - expansionRatio and finalLayerThickness (cell nearest internal mesh)
    // - expansionRatio and firstLayerThickness (cell on surface)
    // - overall thickness and firstLayerThickness
    // - overall thickness and finalLayerThickness
    // - overall thickness and expansionRatio
    //
    // Note: the mode thus selected is global, i.e. one cannot override the
    //       mode on a per-patch basis (only the values can be overridden)

    // Expansion factor for layer mesh
    expansionRatio 1.20;

    // Wanted thickness of the layer furthest away from the wall.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer.
    finalLayerThickness 0.9;

    // Wanted thickness of the layer next to the wall.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer.
    // firstLayerThickness 0.3;

    // Wanted overall thickness of layers.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer.
    // thickness 0.5

    // Minimum overall thickness of total layers. If for any reason layer
    // cannot be above minThickness do not add layer.
    // If relativeSizes this is relative to undistorted size of cell
    // outside layer.
    minThickness 0.01;

    // Per final patch (so not geometry!) the layer information
    // Note: This behaviour changed after 21x. Any non-mentioned patches
    //       now slide unless:
    //          - nSurfaceLayers is explicitly mentioned to be 0.
    //          - angle to nearest surface < slipFeatureAngle (see below)
    layers
    {
        body
        {
            nSurfaceLayers $n_boundary;
        }
    }

    // If points get not extruded do nGrow layers of connected faces that are
    // also not grown. This helps convergence of the layer addition process
    // close to features.
    // Note: changed(corrected) w.r.t 17x! (didn't do anything in 17x)
    nGrow 0;

    // Advanced settings


    // Static analysis of starting mesh

    // When not to extrude surface. 0 is flat surface, 90 is when two faces
    // are perpendicular
    featureAngle 130;

    // Stop layer growth on highly warped cells
    maxFaceThicknessRatio 0.5;


    // Patch displacement

    // Number of smoothing iterations of surface normals
    nSmoothSurfaceNormals 1;

    // Smooth layer thickness over surface patches
    nSmoothThickness 10;

    // Medial axis analysis

    // Angle used to pick up medial axis points
    // Note: changed(corrected) w.r.t 17x! 90 degrees corresponds to 130
    // in 17x.
    minMedialAxisAngle 90;

    // Reduce layer growth where ratio thickness to medial
    // distance is large
    maxThicknessToMedialRatio 0.3;

    // Number of smoothing iterations of interior mesh movement direction
    nSmoothNormals 3;

    // Optional: limit the number of steps walking away from the surface.
    // Default is unlimited.
    // nMedialAxisIter 10;

    // Optional: smooth displacement after medial axis determination.
    // default is 0.
    // nSmoothDisplacement 90;

    // (wip)Optional: do not extrude a point if none of the surrounding
    // points is not extruded. Default is false.
    // detectExtrusionIsland true;


    // Mesh shrinking

    // Optional: at non-patched sides allow mesh to slip if extrusion
    // direction makes angle larger than slipFeatureAngle. Default is
    // 0.5*featureAngle.
    slipFeatureAngle 30;

    // Maximum number of snapping relaxation iterations. Should stop
    // before upon reaching a correct mesh.
    nRelaxIter 5;

    // Create buffer region for new layer terminations
    nBufferCellsNoExtrude 0;

    // Overall max number of layer addition iterations. The mesher will
    // exit if it reaches this number of iterations; possibly with an
    // illegal mesh.
    nLayerIter 50;

    // Max number of iterations after which relaxed meshQuality controls
    // get used. Up to nRelaxedIter it uses the settings in
    // meshQualityControls,
    // after nRelaxedIter it uses the values in
    // meshQualityControls::relaxed.
    nRelaxedIter 20;

    // Additional reporting: if there are just a few faces where there
    // are mesh errors (after adding the layers) print their face centres.
    // This helps in tracking down problematic mesh areas.
    // additionalReporting true;
}

// Generic mesh quality settings. At any undoable phase these determine
// where to undo.
meshQualityControls
{
    #include "meshQualityDict"
}

// Advanced

debug 0;

//debugFlags
//(
//    mesh            // write intermediate meshes
//    intersections   // write current mesh intersections as .obj files
//    featureSeeds    // write information about explicit feature edge
//                    // refinement
//    attraction      // write attraction as .obj files
//    layerInfo       // write information about layers
//);

writeFlags
(
   // scalarLevels    // write volScalarField with cellLevel for postprocessing
   // layerSets       // write cellSets, faceSets of faces in layer
   // layerFields     // write volScalarField for layer coverage
);

// Merge tolerance. Is fraction of overall bounding box of initial mesh.
// Note: the write tolerance needs to be higher than this.
mergeTolerance 1e-6;

// ************************************************************************* //
